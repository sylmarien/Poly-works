#version 430

// Définition des paramètres des sources de lumière
struct LightSourceParameters
{
   vec4 ambient;
   vec4 diffuse;
   vec4 specular;
   vec4 position;
   vec3 spotDirection;
   float spotExponent;
   float spotCutoff;            // ([0.0,90.0] ou 180.0)
   float constantAttenuation;
   float linearAttenuation;
   float quadraticAttenuation;
};
uniform LightSourceParameters LightSource[3];

// Définition des paramètres des matériaux
struct MaterialParameters
{
   vec4 emission;
   vec4 ambient;
   vec4 diffuse;
   vec4 specular;
   float shininess;
};
uniform MaterialParameters FrontMaterial;
uniform MaterialParameters BackMaterial;

// Définition des paramètres globaux du modèle de lumière
struct LightModelParameters
{
   vec4 ambient;       // couleur ambiante
   bool localViewer;   // observateur local ou à l'infini?
   bool twoSide;       // éclairage sur les deux côtés ou un seul?
};
uniform LightModelParameters LightModel;

layout(location=0) uniform mat4 matrModel;
layout(location=4) uniform mat4 matrVisu;
layout(location=8) uniform mat4 matrProj;
layout(location=12) uniform mat3 matrNormale;

/////////////////////////////////////////////////////////////////

layout(location=0) in vec4 Vertex;
layout(location=2) in vec3 Normal;
layout(location=3) in vec4 Color;
layout(location=8) in vec4 MultiTexCoord0;
//layout(location=9) in vec4 MultiTexCoord1;

uniform int typeIllumination;
uniform int utiliseCouleur;
uniform int utiliseBlinn;

out vec4 couleur;
out vec3 lightDir, n, eyeVec;

void main( void )
{
   vec4 myColor = vec4(1.0, 1.0, 1.0, 1.0);

   // transformation standard du sommet
   gl_Position = matrProj * matrVisu * matrModel * Vertex;

   // Gouraud
   if (typeIllumination == 0) {
      // calcul de la normale normalisée
      vec3 n = normalize( matrNormale * Normal );
   
      // calculer la position du sommet dans l'espace de la caméra ("eye-coordinate position")
      vec3 ecPosition = vec3( matrVisu * matrModel * Vertex ).xyz;
   
      // Créer eyeVec et lightDir
      vec3 eyeVec = - ecPosition;
      vec3 lightDir = (matrVisu * LightSource[0].position).xyz - ecPosition;
      // Normalisations
      eyeVec = normalize(eyeVec);
      lightDir = normalize(lightDir);
   
      float NdotHV;
      if (utiliseBlinn == 1) { // spéculaire Blinn
         // normaliser le demi-vecteur (Blinn)
         vec3 halfV = normalize(lightDir + eyeVec);
         // produit scalaire pour la réflexion spéculaire
         NdotHV = max( dot(n,halfV), 0.0 );
      } else { // spéculaire Phong
         vec3 R = -reflect( lightDir, n );
         NdotHV = max( dot( R, eyeVec ), 0.0 );
      }
      float NdotL = max( dot(n, lightDir), 0.0 );
   
      // composante diffuse (LightSource[i].position est déjà  dans le repère de l'oeil)
      myColor = abs(dot(n,lightDir)) * LightSource[0].diffuse * FrontMaterial.diffuse * NdotL;
      // composante spéculaire
      myColor += pow(NdotHV, FrontMaterial.shininess) * LightSource[0].specular * FrontMaterial.specular;
      // composante ambiante
      myColor += LightSource[0].ambient * FrontMaterial.ambient;
   } else {
      // calculer la normale qui sera interpolée pour le nuanceur de fragment
      vec3 n = matrNormale * Normal;

      // calculer la position du sommet dans l'espace de la caméra ("eye-coordinate position")
      vec3 ecPosition = vec3( matrVisu * matrModel * Vertex );

      // vecteur de la direction de la lumière (gLightSource[0].position est déjà dans le repère de l'oeil)
      lightDir = vec3( matrVisu * LightSource[0].position).xyz - ecPosition;
      eyeVec = -ecPosition; // vecteur qui pointe vers le (0,0,0), c'est-à-dire vers l'oeil
   }

   // couleur du sommet
   couleur = myColor;
}
